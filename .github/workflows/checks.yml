on:
  pull_request:
    branches: master

env:
  PACK_DIR: /root/.pack

jobs:
  pjrt:
    runs-on: ubuntu-latest
    container: tensorflow/build:latest-python3.9
    steps:
    - uses: actions/checkout@v4
    - name: Build PJRT + XLA binary
      working-directory: spidr/backend
      run: |
        bash ../../install_xla.sh
        (cd xla; ./configure.py --backend=CPU)
        bazel build //c_xla
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: libc_xla.so
        path: spidr/backend/bazel-bin/libc_xla.so
        if-no-files-found: error
  pjrt-plugin-xla-cpu:
    runs-on: ubuntu-latest
    container: tensorflow/build:latest-python3.9
    steps:
#    - name: Mount bazel cache
#      uses: actions/cache@v4
#      with:
#        path: ~/.cache/bazel
#        key: xla-${{ runner.os }}
#    - name: Fetch Bazel cache
#      uses: actions/cache/restore@v4
#      with:
#        path: ~/.cache/bazel
#        key: xla-${{ runner.os }}
    - uses: actions/checkout@v4
    - name: Build XLA CPU PJRT plugin
      run: |
        ./install_xla.sh
        cd xla
        ./configure.py --backend=CPU
        bazel build //xla/xla/pjrt/c:pjrt_c_api_cpu_plugin.so
        mv bazel-bin/xla/pjrt/c/pjrt_c_api_cpu_plugin.so ../pjrt_plugin_xla_cpu.so
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        path: pjrt_plugin_xla_cpu.so
        if-no-files-found: error
    - name: Free disk space  # needed to save bazel cache
      run: |
        df -H

        dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 20

        sudo apt-get purge -y \
            libnvinfer8 \
            libnvinfer-dev \
            libcudnn8 \
            libcudnn8-dev \
            libcublas-12-3 \
            libcublas-dev-12-3 \
            libcusparse-12-3 \
            libcusparse-dev-12-3 \
            libcusolver-12-3 \
            libcusolver-dev-12-3
        sudo apt-get autoremove -y
        sudo apt-get autoclean

        df -H
    - name: Save Bazel cache  # temporary until we merge bazel-cache workflow
      uses: actions/cache/save@v4
      with:
        path: ~/.cache/bazel
        key: pjrt-plugin-xla-cpu-${{ runner.os }}
  pjrt-plugin-xla-cuda:
    runs-on: ubuntu-latest
    container: tensorflow/build:latest-python3.9
    steps:
    - uses: actions/checkout@v4
      # doesn't need checkout as we're only building an XLA target
      #
      # install nvidia docker, and add --runtime=nvidia --gpus all to the docker run command
      # maybe install nvidia drivers on host
      #
      # but how to do this in github?
      #
      # note that we don't need a gpu to compile the cuda binary, only to run it
      #
      # note we're using elixir-nx builds atm so they've done the GPU builds
      # which is why we haven't needed to think about this
  build-tests:
    runs-on: ubuntu-latest
    container: ghcr.io/stefan-hoeck/idris2-pack
    steps:
    - uses: actions/checkout@v4
    - name: Build tests
      working-directory: test
      run: |
        pack switch HEAD
        pack --no-prompt build test.ipkg
        tar cfz test.tar.gz -C build/exec .
    - name: Upload tests
      uses: actions/upload-artifact@v4
      with:
        name: test.tar.gz
        path: test/test.tar.gz
        if-no-files-found: error
  test-unit:
    needs:
      - pjrt
      - pjrt-plugin-xla-cpu
      - build-tests
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
    - name: Install runtime dependencies
      run: |
        sudo apt install chezscheme
    - name: Run tests
      run: |
        tar xfz test.tar.gz . && rm test.tar.gz
        ./test
  readme:
    runs-on: ubuntu-latest
    container: ghcr.io/stefan-hoeck/idris2-pack
    steps:
    - uses: actions/checkout@v4
    - name: Type-check README
      run: |
        pack switch HEAD
        pack --no-prompt typecheck readme.ipkg
  tutorials:
    runs-on: ubuntu-latest
    container: ghcr.io/stefan-hoeck/idris2-pack
    steps:
    - uses: actions/checkout@v4
    - name: Type-check tutorials
      run: |
        pack switch HEAD
        res=0; for f in tutorials/*.ipkg; do pack --no-prompt typecheck $f || res=$?; done; $(exit $res)
