on:
  pull_request:
    branches: master

env:
  PACK_DIR: /root/.pack

jobs:
  pjrt:
    runs-on: ubuntu-latest
    container: tensorflow/build:latest-python3.9
    steps:
    - uses: actions/checkout@v4
    - name: Fetch Bazel cache
      uses: actions/cache/restore@v4
      with:
        path: ~/.cache/bazel
        key: pjrt-${{ runner.os }}
    - name: Build PJRT + XLA binary
      working-directory: spidr/backend
      run: |
        bash ../../install_xla.sh
        (cd xla; ./configure.py --backend=CPU)
        bazel build //:c_xla
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: libc_xla.so
        path: spidr/backend/bazel-bin/libc_xla.so
        if-no-files-found: error
    - name: Save Bazel cache  # temporary until we merge bazel-cache workflow
      uses: actions/cache/save@v4
      with:
        path: ~/.cache/bazel
        key: pjrt-${{ runner.os }}
  # i think that building the plugins separately as shared libs solves the slow build problem
  # because the plugins will be updated rarely and we can use previous builds when the version
  # is unchanged
  pjrt-plugin-xla-cpu:
    runs-on: ubuntu-latest
    container: tensorflow/build:latest-python3.9
    steps:
    - uses: actions/checkout@v4
    - name: Build XLA CPU PJRT plugin
      run: |
        ./install_xla.sh
        cd xla
        ./configure.py --backend=CPU
        bazel build //xla/pjrt/c:pjrt_c_api_cpu_plugin.so
        mv bazel-bin/xla/pjrt/c/pjrt_c_api_cpu_plugin.so ../pjrt_plugin_xla_cpu.so
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        path: pjrt_plugin_xla_cpu.so
        if-no-files-found: error
  pjrt-plugin-xla-cuda:
    runs-on: ubuntu-latest
    container: tensorflow/build:latest-python3.9  # note this implies specific versions of CUDA and cuDNN
    steps:
    - uses: actions/checkout@v4
    - name: Build XLA CUDA PJRT plugin
      run: |
        ./install_xla.sh
        cd xla
        # note we're not using ./configure.py, see https://github.com/openxla/xla/issues/12017
        bazel build --config release_gpu_linux //xla/pjrt/c:pjrt_c_api_gpu_plugin.so
        mv bazel-bin/xla/pjrt/c/pjrt_c_api_gpu_plugin.so ../pjrt_plugin_xla_cuda.so
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        path: pjrt_plugin_xla_cuda.so
        if-no-files-found: error
  build-tests-xla-cpu:
    runs-on: ubuntu-latest
    container: ghcr.io/stefan-hoeck/idris2-pack
    steps:
    - uses: actions/checkout@v4
    - name: Build tests
      run: |
        pack switch HEAD
        pack --no-prompt build test/xla-cpu/xla-cpu.ipkg
        tar cfz test.tar.gz -C build/exec .
    - name: Upload tests
      uses: actions/upload-artifact@v4
      with:
        name: test.tar.gz
        if-no-files-found: error
  build-tests-xla-cuda:
    runs-on: ubuntu-latest
    container: ghcr.io/stefan-hoeck/idris2-pack
    steps:
    - uses: actions/checkout@v4
    - name: Build tests
      run: |
        pack switch HEAD
        pack --no-prompt build test/xla-cuda/xla-cuda.ipkg
        tar cfz test.tar.gz -C build/exec .
    - name: Upload tests
      uses: actions/upload-artifact@v4
      with:
        name: test.tar.gz
        if-no-files-found: error
  test-xla-cpu:
    needs:
      - pjrt
      - pjrt-plugin-xla-cpu
      - build-tests-xla-cpu
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
    - name: Install runtime dependencies
      run: |
        sudo apt install chezscheme
    - name: Run tests
      run: |
        tar xfz test.tar.gz . && rm test.tar.gz
        ./test
  test-xla-cuda:
    needs:
      - pjrt
      - pjrt-plugin-xla-cuda
      - build-tests-xla-cuda
    runs-on: ubuntu-latest  # needs a CUDA runner
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
    - name: Install runtime dependencies
      run: |
        # install appropriate cuda and cudnn versions
        sudo apt install chezscheme
    - name: Run tests
      run: |
        tar xfz test.tar.gz . && rm test.tar.gz
        ./test
  readme:
    runs-on: ubuntu-latest
    container: ghcr.io/stefan-hoeck/idris2-pack
    steps:
    - uses: actions/checkout@v4
    - name: Type-check README
      run: |
        pack switch HEAD
        pack --no-prompt typecheck readme.ipkg
  tutorials:
    runs-on: ubuntu-latest
    container: ghcr.io/stefan-hoeck/idris2-pack
    steps:
    - uses: actions/checkout@v4
    - name: Type-check tutorials
      run: |
        pack switch HEAD
        res=0; for f in tutorials/*.ipkg; do pack --no-prompt typecheck $f || res=$?; done; $(exit $res)
