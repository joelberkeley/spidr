on:
  pull_request:
    branches: master

jobs:
  pjrt:
    runs-on: ubuntu-latest
    container: tensorflow/build:latest-python3.9
    steps:
    - uses: actions/checkout@v4
    - name: Fetch Bazel cache
      uses: actions/cache/restore@v4
      with:
        path: ~/.cache/bazel
        key: pjrt-${{ runner.os }}
    - name: Build PJRT + XLA binary
      working-directory: spidr/backend
      run: |
        bash ../../install_xla.sh
        (cd xla; ./configure.py --backend=CPU)
        bazel build //:c_xla
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: libc_xla.so
        path: spidr/backend/bazel-bin/libc_xla.so
        if-no-files-found: error
    - name: Save Bazel cache
      uses: actions/cache/save@v4
      with:
        path: ~/.cache/bazel
        key: pjrt-${{ runner.os }}
  pjrt-plugin-xla-cpu:
    runs-on: ubuntu-latest
    container: tensorflow/build:latest-python3.9
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
    - name: Build XLA CPU PJRT plugin
      working-directory: pjrt-plugins/xla-cpu
      run: >-
        # if [[ $(git diff --exit-code HEAD~1 XLA_COMMIT_SHA) ]]; then  # is this enough? what if anything else changes?
        ./build.sh
        # else
        #   exit 0  # fetch latest build
        # fi
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        path: pjrt-plugins/xla-cpu/pjrt_plugin_xla_cpu.so
        if-no-files-found: error
  pjrt-plugin-xla-cuda:
    runs-on: ubuntu-latest
    container: tensorflow/build:latest-python3.9  # note this implies specific versions of CUDA and cuDNN
    steps:
    - uses: actions/checkout@v4
    - name: Build XLA CUDA PJRT plugin
      working-directory: pjrt-plugins/xla-cuda
      run: ./build.sh
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        path: pjrt-plugins/xla-cuda/pjrt_plugin_xla_cuda.so
        if-no-files-found: error
  build-tests-xla-cpu:
    runs-on: ubuntu-latest
    container: ghcr.io/stefan-hoeck/idris2-pack
    steps:
    - uses: actions/checkout@v4
    - name: Build tests
      working-directory: test/xla-cpu
      run: |
        pack switch HEAD
        pack --no-prompt build xla-cpu.ipkg
        tar cfz tests-xla-cpu.tar.gz -C build/exec .
    - name: Upload tests
      uses: actions/upload-artifact@v4
      with:
        name: tests-xla-cpu.tar.gz
        path: test/xla-cpu/tests-xla-cpu.tar.gz
        if-no-files-found: error
  build-tests-xla-cuda:
    runs-on: ubuntu-latest
    container: ghcr.io/stefan-hoeck/idris2-pack
    steps:
    - uses: actions/checkout@v4
    - name: Build tests
      working-directory: test/xla-cuda
      run: |
        pack switch HEAD
        pack --no-prompt build xla-cuda.ipkg
        tar cfz tests-xla-cuda.tar.gz -C build/exec .
    - name: Upload tests
      uses: actions/upload-artifact@v4
      with:
        name: tests-xla-cuda.tar.gz
        path: test/xla-cuda/tests-xla-cuda.tar.gz
        if-no-files-found: error
  test-xla-cpu:
    needs:
      - pjrt
#      - pjrt-plugin-xla-cpu
      - build-tests-xla-cpu
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
    - name: Install runtime dependencies
      run: |
        sudo apt install chezscheme
    - name: Run tests
      run: |
        tar xfz tests-xla-cpu.tar.gz . && rm tests-xla-cpu.tar.gz

        # hack for reasonable build times, will eventually live up in build step
        sudo apt install -y wget
        wget https://github.com/joelberkeley/xla-build/releases/download/spidr-cache1/pjrt_plugin_xla_cpu.so

        ./test
  test-xla-cuda:
    needs:
      - pjrt
      - pjrt-plugin-xla-cuda
      - build-tests-xla-cuda
    runs-on: nvcr.io/nvidia/tensorrt:23.11-py3  # needs a CUDA runner
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
    - name: Install runtime dependencies
      run: |
        # install appropriate cuda and cudnn versions
        sudo apt install chezscheme
    - name: Run tests
      run: |
        tar xfz tests-xla-cuda.tar.gz . && rm tests-xla-cuda.tar.gz
        ./test
  readme:
    runs-on: ubuntu-latest
    container: ghcr.io/stefan-hoeck/idris2-pack
    steps:
    - uses: actions/checkout@v4
    - name: Type-check README
      run: |
        pack switch HEAD
        pack --no-prompt typecheck readme.ipkg
  tutorials:
    runs-on: ubuntu-latest
    container: ghcr.io/stefan-hoeck/idris2-pack
    steps:
    - uses: actions/checkout@v4
    - name: Type-check tutorials
      run: |
        pack switch HEAD
        res=0; for f in tutorials/*.ipkg; do pack --no-prompt typecheck $f || res=$?; done; $(exit $res)
