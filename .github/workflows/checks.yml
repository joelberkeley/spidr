on:
  pull_request:
    branches: master

jobs:
  shellcheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install shellcheck
        run: sudo apt-get install shellcheck
      - name: Run shellcheck
        shell: bash
        run: |
          shopt -s extglob nullglob globstar
          shellcheck **/*.sh
  pjrt-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
    - name: Build PJRT + XLA binary
      run: |
        exit 1
        if [ ! "$(git diff --exit-code HEAD^ spidr/backend/VERSION)" ]; then
          curl -LO --fail-with-body "https://github.com/joelberkeley/spidr/releases/download/c-xla-v$(cat spidr/backend/VERSION)/libc_xla-linux.so"
        else
          # free up space not used if running in Docker, see
          # https://github.com/orgs/community/discussions/25678#discussioncomment-5242449
          rm -rf /opt/hostedtoolcache
          docker run \
            -v $(pwd):/spidr -w /spidr \
            tensorflow/build:latest-python3.9 \
            sh -c "spidr/backend/build.sh"
        fi

        mv libc_xla-linux.so libc_xla.so
  pjrt-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
    - name: Build PJRT + XLA binary
      run: |
        # if [ ! "$(git diff --exit-code HEAD^ spidr/backend/VERSION)" ]; then
        #   curl -LO --fail-with-body "https://github.com/joelberkeley/spidr/releases/download/c-xla-v$(cat spidr/backend/VERSION)/libc_xla-macos.so"
        # else
        brew install bazelisk
        python3 -m venv .venv
        source .venv/bin/activate
        pip3 install numpy
        ./spidr/backend/build.sh
        # fi

        mv libc_xla-macos.dylib libc_xla.dylib
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: libc_xla.so
        path: libc_xla.so
        if-no-files-found: error
  pjrt-plugin-xla-cpu-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
    - name: Build or fetch XLA CPU PJRT plugin
      run: |
        exit 1
        if [ ! "$(git diff --exit-code HEAD^ XLA_VERSION)" ]; then
          . ./dev.sh
          rev=$(cat XLA_VERSION)
          curl -LO --fail-with-body "https://github.com/joelberkeley/spidr/releases/download/xla-$(short_revision $rev)/pjrt_plugin_xla_cpu-linux.so"
        else
          rm -rf /opt/hostedtoolcache
          docker run \
            -v $(pwd):/spidr -w /spidr \
            tensorflow/build:latest-python3.9 \
            sh -c "pjrt-plugins/xla-cpu/build.sh"
        fi

        mv pjrt_plugin_xla_cpu-linux.so pjrt_plugin_xla_cpu.so
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: pjrt_plugin_xla_cpu.so
        path: pjrt_plugin_xla_cpu.so
        if-no-files-found: error
  pjrt-plugin-xla-cpu-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
    - name: Build or fetch XLA CPU PJRT plugin
      run: |
        # if [ ! "$(git diff --exit-code HEAD^ XLA_VERSION)" ]; then
        #   . ./dev.sh
        #   rev=$(cat XLA_VERSION)
        #   curl -LO --fail-with-body "https://github.com/joelberkeley/spidr/releases/download/xla-$(short_revision $rev)/pjrt_plugin_xla_cpu-macos.dylib"
        # else
        brew install bazelisk
        python3 -m venv .venv
        source .venv/bin/activate
        pip3 install numpy
        ./pjrt-plugins/xla-cpu/build.sh
        # fi

        mv pjrt_plugin_xla_cpu-macos.dylib pjrt_plugin_xla_cpu.dylib
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: pjrt_plugin_xla_cpu.dylib
        path: pjrt_plugin_xla_cpu.dylib
        if-no-files-found: error
  pjrt-plugin-xla-cuda-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Build or fetch XLA CUDA PJRT plugin
        run: |
          exit 1
          if [ ! "$(git diff --exit-code HEAD^ XLA_VERSION)" ]; then
            . ./dev.sh
            rev=$(cat XLA_VERSION)
            curl -LO --fail-with-body "https://github.com/joelberkeley/spidr/releases/download/xla-$(short_revision $rev)/pjrt_plugin_xla_cuda-linux.so"
          else
            rm -rf /opt/hostedtoolcache
            # note this implies specific versions of CUDA and cuDNN
            docker run \
              -v $(pwd):/spidr -w /spidr \
              tensorflow/build:latest-python3.9 \
              sh -c "pjrt-plugins/xla-cuda/build.sh"
          fi

          mv pjrt_plugin_xla_cuda-linux.so pjrt_plugin_xla_cuda.so
      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: pjrt_plugin_xla_cuda.so
          path: pjrt_plugin_xla_cuda.so
          if-no-files-found: error
  build-tests-xla-cpu-linux:
    runs-on: ubuntu-latest
    container: ghcr.io/stefan-hoeck/idris2-pack
    steps:
    - uses: actions/checkout@v4
    - name: Build tests
      working-directory: test/xla-cpu
      run: |
        exit 1
        apt-get update && apt-get install -y curl
        pack switch HEAD
        SPIDR_INSTALL_SUPPORT_LIBS=0 pack --no-prompt build xla-cpu.ipkg
        tar cfz tests-xla-cpu.tar.gz -C build/exec .
    - name: Upload tests
      uses: actions/upload-artifact@v4
      with:
        name: tests-xla-cpu.tar.gz
        path: test/xla-cpu/tests-xla-cpu.tar.gz
        if-no-files-found: error
  build-tests-xla-cpu-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build tests
        working-directory: test/xla-cpu
        run: |
          echo 0
          echo 0
          echo 0
          echo 0
          brew config
          echo 0
          echo 0
          echo 0
          echo 0
          brew install chezscheme coreutils gmp
          git clone https://github.com/stefan-hoeck/idris2-pack.git
          (cd idris2-pack && make micropack SCHEME=chez)
          # echo chez | bash -c "$(curl -fsSL https://raw.githubusercontent.com/stefan-hoeck/idris2-pack/main/install.bash)"
          echo 1
          echo 1
          echo 1
          echo 1
          echo 1
          echo 1
          echo 1
          echo 1
          echo 1
          echo 1
          echo 1
          echo 1
          echo 1
          echo 1
          export PATH="$HOME/.pack/bin:$HOME/.idris2/bin:$PATH"
          # pack switch HEAD
          echo 2
          echo 2
          echo 2
          echo 2
          echo 2
          echo 2
          echo 2
          echo 2
          echo 2
          echo 2
          echo 2
          echo 2
          echo 2
          SPIDR_INSTALL_SUPPORT_LIBS=0 pack --no-prompt build xla-cpu.ipkg
          echo 3
          echo 3
          echo 3
          echo 3
          echo 3
          echo 3
          echo 3
          echo 3
          echo 3
          echo 3
          echo 3
          echo 3
          echo 3
          tar cfz tests-xla-cpu.tar.gz -C build/exec .
      - name: Upload tests
        uses: actions/upload-artifact@v4
        with:
          name: tests-xla-cpu.tar.gz
          path: test/xla-cpu/tests-xla-cpu.tar.gz
          if-no-files-found: error
  build-tests-xla-cuda:
    runs-on: ubuntu-latest
    container: ghcr.io/stefan-hoeck/idris2-pack
    steps:
    - uses: actions/checkout@v4
    - name: Build tests
      working-directory: test/xla-cuda
      run: |
        exit 1
        apt-get update && apt-get install -y curl
        pack switch HEAD
        SPIDR_INSTALL_SUPPORT_LIBS=0 pack --no-prompt build xla-cuda.ipkg
        tar cfz tests-xla-cuda.tar.gz -C build/exec .
    - name: Upload tests
      uses: actions/upload-artifact@v4
      with:
        name: tests-xla-cuda.tar.gz
        path: test/xla-cuda/tests-xla-cuda.tar.gz
        if-no-files-found: error
  test-xla-cpu-linux:
    needs:
      - pjrt-linux
      - pjrt-plugin-xla-cpu-linux
      - build-tests-xla-cpu-linux
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
    - name: Install runtime dependencies
      run: |
        sudo apt-get install chezscheme
    - name: Run tests
      run: |
        tar xfz tests-xla-cpu.tar.gz . && rm tests-xla-cpu.tar.gz
        ./test
  test-xla-cpu-macos:
    needs:
      - pjrt-macos
      - pjrt-plugin-xla-cpu-macos
      - build-tests-xla-cpu-macos
    runs-on: macos-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
    - name: Install runtime dependencies
      run: |
        brew install chezscheme
    - name: Run tests
      run: |
        tar xfz tests-xla-cpu.tar.gz . && rm tests-xla-cpu.tar.gz
        ./test
  test-xla-cuda-linux:
    needs:
      - pjrt-linux
      - pjrt-plugin-xla-cuda-linux
      - build-tests-xla-cuda
    runs-on: ubuntu-latest  # needs a CUDA runner
    container: nvcr.io/nvidia/tensorrt:23.11-py3
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
    - name: Install runtime dependencies
      run: |
        apt-get update && apt-get install chezscheme
    - name: Run tests
      run: |
        tar xfz tests-xla-cuda.tar.gz . && rm tests-xla-cuda.tar.gz
        exit 0  # we can't run tests without a GPU
  readme:
    runs-on: ubuntu-latest
    container: ghcr.io/stefan-hoeck/idris2-pack
    steps:
    - uses: actions/checkout@v4
    - name: Type-check README
      run: |
        apt-get update && apt-get install -y curl
        pack switch HEAD
        SPIDR_INSTALL_SUPPORT_LIBS=0 pack --no-prompt typecheck readme.ipkg
  tutorials:
    runs-on: ubuntu-latest
    container: ghcr.io/stefan-hoeck/idris2-pack
    steps:
    - uses: actions/checkout@v4
    - name: Type-check tutorials
      run: |
        apt-get update && apt-get install -y curl
        pack switch HEAD
        export SPIDR_INSTALL_SUPPORT_LIBS=0
        res=0; for f in tutorials/*.ipkg; do pack --no-prompt typecheck $f || res=$?; done; $(exit $res)
