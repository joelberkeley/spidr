on:
  workflow_dispatch:
  push:
    branches: master
    paths:
      - 'XLA_VERSION'

jobs:
  create-release:
    runs-on: ubuntu-24.04
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
      - name: Read XLA version
        run: |
          . ./dev.sh
          xla_rev="$(cat XLA_VERSION)"
          echo "XLA_REV=$(short_revision $xla_rev)" >> $GITHUB_ENV
      - name: Create C XLA release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: xla-${{ env.XLA_REV }}
          release_name: XLA revision ${{ env.XLA_REV }}
          body: "XLA revision ${{ env.XLA_REV }}"
  build-openxla-dev-docker:
    runs-on: ubuntu-24.04
    steps:
      - uses: docker/setup-buildx-action@v3
      - name: Build and export
        uses: docker/build-push-action@v6
        with:
          file: openxla-dev.Dockerfile
          tags: openxla-dev
          outputs: type=docker,dest=/tmp/openxla-dev.tar
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: openxla-dev
          path: /tmp/openxla-dev.tar
  pjrt-plugin-xla-cpu-linux-x86_64:
    needs:
      - create-release
      - build-openxla-dev-docker
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Download bazel Docker image
        uses: actions/download-artifact@v4
        with:
          name: openxla-dev
          path: /tmp
      - name: Build XLA CPU plugin for Linux x86_64
        run: |
          docker build -t openxla-dev -f bazel-ubuntu2404.Dockerfile .
          docker run -v $(pwd):/spidr -w /spidr openxla-dev sh -c "./pjrt-plugins/xla-cpu/build.sh"
      - name: Publish XLA CPU plugin
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: pjrt_plugin_xla_cpu-linux-x86_64.so
          asset_name: pjrt_plugin_xla_cpu-linux-x86_64.so
          asset_content_type: application/x-sharedlib
  pjrt-plugin-xla-cpu-darwin-aarch64:
    needs: create-release
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
      - name: Build XLA CPU plugin for Darwin AArch64
        run: ./pjrt-plugins/xla-cpu/build.sh
      - name: Publish XLA CPU plugin
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: pjrt_plugin_xla_cpu-darwin-aarch64.dylib
          asset_name: pjrt_plugin_xla_cpu-darwin-aarch64.dylib
          asset_content_type: application/x-sharedlib
  pjrt-plugin-xla-cuda-linux-x86_64:
    needs:
      - create-release
      - build-openxla-dev-docker
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Download bazel Docker image
        uses: actions/download-artifact@v4
        with:
          name: openxla-dev
          path: /tmp
      - name: Build XLA CUDA plugin for Linux x86_64
        run: |
          docker build -t openxla-dev -f openxla-dev.Dockerfile .
          docker run -v $(pwd):/spidr -w /spidr openxla-dev sh -c "./pjrt-plugins/xla-cuda/build.sh"
      - name: Publish XLA CUDA plugin
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: pjrt_plugin_xla_cuda-linux-x86_64.so
          asset_name: pjrt_plugin_xla_cuda-linux-x86_64.so
          asset_content_type: application/x-sharedlib
